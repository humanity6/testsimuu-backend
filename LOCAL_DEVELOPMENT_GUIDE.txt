====================================================================
TESTIMUS LOCAL DEVELOPMENT SETUP GUIDE
====================================================================

üöÄ QUICK START
--------------
Your app is now configured for local development and testing!
All API endpoints now use localhost:8000 instead of production server (188.245.35.46)

1. Start the local server:
   > python start_local_development.py
   OR
   > python run_local_server.py

2. Test the API endpoints:
   > python test_local_api_endpoints.py
   (Run this in a separate terminal while server is running)

3. Access your local application:
   ‚Ä¢ Main Server: http://localhost:8000/
   ‚Ä¢ Admin Panel: http://localhost:8000/admin/
   ‚Ä¢ API Docs: http://localhost:8000/api/docs/
   ‚Ä¢ API Redoc: http://localhost:8000/api/redoc/

====================================================================
üìã LOCAL CONFIGURATION SUMMARY
====================================================================

‚úÖ DEBUG = True (Development mode)
‚úÖ Database: SQLite (Local file: exam_prep_db.sqlite3)
‚úÖ Email Backend: Console (Emails print to terminal)
‚úÖ CORS: Allow all origins (Development only)
‚úÖ Static Files: Development mode
‚úÖ Authentication: Case-insensitive email enabled
‚úÖ Frontend URL: http://localhost:8000
‚úÖ Flutter App: Configured for localhost:8000
‚úÖ Testing Mode: Enabled for external APIs
‚úÖ Backend: Django REST Framework (Python 3.12+)
‚úÖ Frontend: Flutter (Cross-platform mobile & web)
‚úÖ Database: SQLite (development & production)
‚úÖ Authentication: JWT with SimpleJWT
‚úÖ AI Integration: OpenAI GPT models

====================================================================
üîÑ CONFIGURATION CHANGES MADE
====================================================================

FLUTTER APP UPDATES:
‚úÖ Frontend/lib/utils/api_config.dart - Updated to use localhost:8000
‚úÖ Frontend/test/api_endpoint_test.dart - Updated test URLs
‚úÖ Frontend/test/service_dummy_data_test.dart - Updated test expectations
‚úÖ Android network security config already allows localhost

DJANGO BACKEND:
‚úÖ exam_prep_platform/settings.py - Already configured for local development
‚úÖ Local server scripts updated and ready
‚úÖ All API endpoints will use localhost:8000

PRODUCTION VS LOCAL:
‚úÖ Production server (188.245.35.46) - NOT USED for local development
‚úÖ Local server (localhost:8000) - USED for local development
‚úÖ Easy switching between environments via configuration files

====================================================================
üß™ TESTING FEATURES
====================================================================

1. CASE-INSENSITIVE EMAIL AUTHENTICATION:
   ‚Ä¢ Users can log in with any case variation of their email
   ‚Ä¢ Example: user@example.com, USER@EXAMPLE.COM, User@Example.COM
   ‚Ä¢ All work for the same account

2. API ENDPOINTS (ALL ON LOCALHOST):
   ‚Ä¢ Registration: POST http://localhost:8000/api/v1/auth/register/
   ‚Ä¢ Login: POST http://localhost:8000/api/v1/auth/login/
   ‚Ä¢ Logout: POST http://localhost:8000/api/v1/auth/logout/
   ‚Ä¢ Profile: GET/PUT http://localhost:8000/api/v1/users/me/
   ‚Ä¢ Token Refresh: POST http://localhost:8000/api/v1/auth/refresh/
   ‚Ä¢ Admin APIs: http://localhost:8000/api/v1/admin/...

3. ADMIN PANEL:
   ‚Ä¢ Create superuser: python manage.py createsuperuser
   ‚Ä¢ Access: http://localhost:8000/admin/

4. COMPREHENSIVE TESTING:
   ‚Ä¢ Run: python test_local_api_endpoints.py
   ‚Ä¢ Tests all major API endpoints
   ‚Ä¢ Verifies local configuration is working

====================================================================
üõ†Ô∏è SERVER STARTUP COMMANDS
====================================================================

RECOMMENDED (Automated):
> python start_local_development.py
   ‚Ä¢ Comprehensive environment checks
   ‚Ä¢ Automatic database migrations
   ‚Ä¢ Configuration verification
   ‚Ä¢ Server startup with monitoring

SIMPLE (Existing):
> python run_local_server.py
   ‚Ä¢ Quick server startup
   ‚Ä¢ Basic environment setup
   ‚Ä¢ Automatic migrations

MANUAL (Advanced):
1. Start development server:
   > python manage.py runserver localhost:8000

2. Run migrations:
   > python manage.py migrate

3. Create admin user:
   > python manage.py createsuperuser

4. Collect static files (if needed):
   > python manage.py collectstatic

5. Run tests:
   > python manage.py test

====================================================================
üîß ENVIRONMENT VARIABLES (OPTIONAL)
====================================================================

For real API testing, you can set these environment variables:

Windows PowerShell:
> $env:OPENAI_API_KEY="your-real-openai-key"
> $env:SUMUP_API_KEY="your-real-sumup-key"
> $env:API_BASE_URL="http://localhost:8000"

Windows Command Prompt:
> set OPENAI_API_KEY=your-real-openai-key
> set SUMUP_API_KEY=your-real-sumup-key
> set API_BASE_URL=http://localhost:8000

Without these, the app uses test/mock values for local development.

====================================================================
üì± MOBILE APP TESTING
====================================================================

For Flutter mobile app testing:

1. Ensure your mobile device/emulator can reach your computer
2. For Android emulator: Use 10.0.2.2:8000 instead of localhost:8000
3. For physical device: Use your computer's IP address (e.g., 192.168.1.100:8000)
4. Update ALLOWED_HOSTS in settings.py if needed
5. Android network security config already allows localhost connections

FLUTTER CONFIGURATION:
‚Ä¢ The Flutter app is now configured to use localhost:8000 by default
‚Ä¢ For device testing, you may need to temporarily change the API base URL
‚Ä¢ All test files updated to expect localhost URLs

====================================================================
üêõ TROUBLESHOOTING
====================================================================

1. SERVER WON'T START:
   ‚Ä¢ Check if port 8000 is already in use: netstat -an | findstr :8000
   ‚Ä¢ Try: python manage.py runserver localhost:8001
   ‚Ä¢ Ensure you're in the project directory

2. DATABASE ERRORS:
   ‚Ä¢ Delete exam_prep_db.sqlite3 and run migrations again
   ‚Ä¢ Or run: python manage.py migrate --run-syncdb

3. FLUTTER APP CAN'T CONNECT:
   ‚Ä¢ Verify server is running on http://localhost:8000
   ‚Ä¢ Check if Flutter app is using correct API base URL
   ‚Ä¢ For mobile testing, use device IP instead of localhost

4. API NOT RESPONDING:
   ‚Ä¢ Run: python test_local_api_endpoints.py to verify all endpoints
   ‚Ä¢ Check Django logs in terminal
   ‚Ä¢ Ensure CORS settings allow your requests
   ‚Ä¢ Verify API base URL in Flutter app

5. PRODUCTION VS LOCAL CONFUSION:
   ‚Ä¢ Make sure you're NOT using production_settings.py
   ‚Ä¢ Verify Frontend/lib/utils/api_config.dart uses localhost
   ‚Ä¢ Check that no hardcoded production URLs remain

====================================================================
üéØ PRODUCTION vs DEVELOPMENT
====================================================================

CURRENT (LOCAL DEVELOPMENT):
‚Ä¢ Settings: exam_prep_platform.settings
‚Ä¢ Database: SQLite (exam_prep_db.sqlite3)
‚Ä¢ Debug: True
‚Ä¢ Server: localhost:8000
‚Ä¢ Flutter API Base: localhost:8000
‚Ä¢ Static Files: Development server
‚Ä¢ Email: Console output

FOR PRODUCTION DEPLOYMENT:
‚Ä¢ Settings: exam_prep_platform.production_settings  
‚Ä¢ Database: SQLite
‚Ä¢ Debug: False
‚Ä¢ Server: 188.245.35.46
‚Ä¢ Flutter API Base: 188.245.35.46
‚Ä¢ Static Files: Collected and served by web server
‚Ä¢ Email: SMTP

SWITCHING TO PRODUCTION:
1. Update Flutter API config to use production server
2. Use production_settings.py
3. Deploy to production server
4. Update environment variables

====================================================================
‚ú® WHAT'S NEW
====================================================================

‚úÖ Case-insensitive email authentication implemented
‚úÖ Full local development configuration completed
‚úÖ Flutter app configured for localhost:8000
‚úÖ Production server (188.245.35.46) disabled for local development
‚úÖ Comprehensive API testing script added
‚úÖ Advanced server startup script with checks
‚úÖ All test files updated for local development
‚úÖ Android network security allows localhost connections

Your app is ready for local development and testing!
No more production server dependencies for local development!

==================================================================== 